    // class Aluno {
    //   constructor(matricula, nome) {
    //     this.matricula = matricula;
    //     this.nome = nome;
    //   }
    // }

    // class Prova {
    //   constructor(aluno, nota) {
    //     this.aluno = aluno;
    //     this.nota = nota;
    //   }
    // }

    // let avaliacoes = [
    //   new Prova(new Aluno(1, 'Luana'), 8),
    //   new Prova(new Aluno(2, 'Cassio'), 6),
    //   new Prova(new Aluno(3, 'Barney'), 9),
    //   new Prova(new Aluno(4, 'Bira'), 5),
    // ];

    // let aprovados = avaliacoes
    //   .filter((prova) => prova.nota >= 7)
    //   .map((prova) => prova.aluno.nome);

    // let aprovados = avaliacoes
    //   .filter(function (prova) {
    //     return prova.nota >= 7;
    //   })
    //   .map(function (prova) {
    //     return prova.aluno.nome;
    //   });

    // Reordenar data para o formato ano/mês/dia
    // let dataString = '17-05-2016';

    // dataString = dataString.split('-').reverse().join('/');

    // let data = new Date(dataString);

    // console.log(data);

    // OUTRA FORMA COM ARROW FUNCTION

    // let data = new Date(
    //   ...this._inputData.value.split('-').map((item, indice) => {
    //     if (indice == 1) {
    //       return item - 1;
    //     }
    //     return item;
    //   })
    // );

    // let data = new Date(this._inputData.value.split('-'));
    // let data = new Date(this._inputData.value.replace(/-/, ','));
    // console.log(typeof this._inputData.value);

    // console.log(negociacao);

    // let numeros = [20, 30];
    // function somaDoisNumeros(numero1, numero2) {
    //   return numero1 + numero2;
    // }

    // console.log(somaDoisNumeros(...numeros));

    // let numeros = [3, 2, 11, 20, 8, 7];
    // console.log(numeros);

    // let novosNumeros = numeros.map((item) => (item % 2 ? item * 2 : item));

    // let novosNumeros = numeros.map((item) => {
    //   if (item % 2 > 0) {
    //     return item * 2;
    //   } else {
    //     return item;
    //   }
    // });



    CONCATENANDO LISTAS
    let listaDeNomes1 = ['Flávio', 'Rogers', 'Júlia'];
    let listaDeNomes2 = ['Vieira', 'Fernanda', 'Gerson'];
    let lista = listaDeNomes1.concat(listaDeNomes2);
    const teste = (lista) => {
      lista.forEach((item) => console.log(item));
    };
    teste(lista);


              <td>${(function () {
                  let total = 0;
                  model.negociacoes.forEach((n) => {
                    total += n.volume;
                  });
                  return total;
                })()}
              </td>

              <td>${model.negociacoes.reduce((total, n) => {
                  return total + n.volume;
                }, 0)}
              </td>


              //////


  <script>
    class Relogio {
      constructor() {
        this._segundos = 0;

        setInterval(() => {
          console.log(this);
        }, 1000);
      }
    }

    var relogio = new Relogio();
</script>



////////////////


class NegociacaoController {

    constructor() {

        // a variável self guarda uma referência para this, instância de NegociacaoController

        let self = this;

        // aqui usei uma function tradicional, mas poderia ser uma arrow function também

        this._listaNegociacoes = new ListaNegociacoes(function(model) { 
            self._negociacoesView.update(model);
        });
    }

    // código posterior omitido
}


//////////////////

<script>
  let objeto1 = {
    nome: 'Bob',
  };

  let objeto2 = {
    nome: 'Leo',
  };

  function exibeNome(pref, suf) {
    alert(pref + this.nome + suf);
  }

  Reflect.apply(exibeNome, objeto1, ['(', ')']); // exibe 'Bob'
</script>

